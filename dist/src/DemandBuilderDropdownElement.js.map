{"version":3,"file":"DemandBuilderDropdownElement.js","sourceRoot":"","sources":["../../src/DemandBuilderDropdownElement.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,UAAU,EAAE,MAAM,KAAK,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAE5D;;GAEG;AAEH,IAAa,4BAA4B,GAAzC,MAAa,4BAA6B,SAAQ,UAAU;IAA5D;;QACE,4EAA4E;QAChD,WAAM,GAAG,iBAAiB,CAAC;QAEvD,4FAA4F;QAC5F,2EAA2E;QAChD,YAAO,GAK5B,EAAE,CAAC;QAET,kEAAkE;QACtB,SAAI,GAAY,IAAI,CAAC;QAEzD,qBAAgB,GAAG,IAAI,GAAG,EAAU,CAAC;IAgH/C,CAAC;IAxDC,mBAAmB,CAAC,CAAQ;QAC1B,MAAM,EAAE,EAAE,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC,MAA0B,CAAC;QACrD,IAAI,OAAO,EAAE;YACX,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YAC9B,iBAAiB;YACjB,MAAM,KAAK,GAAG,IAAI,WAAW,CAAC,sBAAsB,EAAE;gBACpD,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,IAAI;gBACd,MAAM,EAAE;oBACN,EAAE;oBACF,iBAAiB,EAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,KAAK,CAAC;iBACpD;aACF,CAAC,CAAC;YACH,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;SAC3B;aAAM;YACL,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACjC,oBAAoB;YACpB,MAAM,KAAK,GAAG,IAAI,WAAW,CAAC,yBAAyB,EAAE;gBACvD,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,IAAI;gBACd,MAAM,EAAE;oBACN,EAAE;oBACF,eAAe,EAAE,IAAI,CAAC,gBAAgB,CAAC,IAAI,KAAK,CAAC;iBAClD;aACF,CAAC,CAAC;YACH,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;SAC3B;IACH,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA;uBACQ,IAAI,CAAC,MAAM;;;iBAGjB,GAAG,EAAE;YACZ,IAAI,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC;QACzB,CAAC;;;UAGC,IAAI,CAAC,OAAO,CAAC,GAAG,CAChB,CAAC,CAAC,EAAE,CAAC,IAAI,CAAA;;;qBAGE,CAAC,CAAC,EAAE;;yBAEA,IAAI,CAAC,mBAAmB;2BACtB,CAAC,CAAC,OAAO;4BACR,CAAC,CAAC,QAAQ;;uBAEf,CAAC,CAAC,WAAW;;WAEzB,CACF;;KAEJ,CAAC;IACJ,CAAC;CACF,CAAA;AA9GQ,mCAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoDlB,CAAC;AApE0B;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;4DAA4B;AAI5B;IAA1B,QAAQ,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;6DAKjB;AAGmC;IAA3C,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;0DAAsB;AAdtD,4BAA4B;IADxC,aAAa,CAAC,iCAAiC,CAAC;GACpC,4BAA4B,CAgIxC;SAhIY,4BAA4B","sourcesContent":["import { html, css, LitElement } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\n/**\n * Collapsable element displaying a prompt and list of choices, each with a checkbox.\n */\n@customElement('demand-builder-dropdown-element')\nexport class DemandBuilderDropdownElement extends LitElement {\n  // String displayed at the top of the element, in both open and closed state\n  @property({ type: String }) prompt = 'I want to know:';\n\n  // List of choices to be displayed with a unique identifier, description string (displayed),\n  // and checked boolean indicating if the option should be checked initially\n  @property({ type: Array }) choices: {\n    id: string;\n    description: string;\n    checked: boolean;\n    disabled: boolean;\n  }[] = [];\n\n  // Boolean indicating if the choices should be displayed initially\n  @property({ type: Boolean, reflect: true }) open: boolean = true;\n\n  private _selectedChoices = new Set<string>();\n\n  static styles = css`\n    :host {\n      display: grid;\n      grid-template-columns: repeat(8, 1fr);\n      border: 2px solid #000;\n      border-radius: 10px;\n      padding: 20px 40px 20px 40px;\n    }\n\n    :host([open]) {\n      padding: 20px 40px 40px 40px;\n    }\n\n    :host([open]) #choices-list {\n      display: grid;\n    }\n\n    :host([open]) #drpdwn-collapse-btn {\n      background: url('/src/assets/icons/close_container_arrow.svg');\n    }\n\n    #prompt {\n      display: flex;\n      grid-column: 1/8;\n      align-items: center;\n    }\n\n    #drpdwn-collapse-btn {\n      grid-column: 8/9;\n      height: 24px;\n      background: url('/src/assets/icons/open_container_arrow.svg');\n      width: 24px;\n      border: none;\n      justify-self: right;\n    }\n\n    #choices-list {\n      display: none;\n      overflow: hidden;\n      grid-column: 1/9;\n      grid-template-columns: 1fr;\n      row-gap: 35px;\n      padding: 25px 0px 0px 0px;\n    }\n\n    #choice-ctr {\n      padding: 0px 30px;\n    }\n\n    p {\n      margin: 0px;\n    }\n  `;\n\n  handleCheckboxClick(e: Event) {\n    const { id, checked } = e.target as HTMLInputElement;\n    if (checked) {\n      this._selectedChoices.add(id);\n      // Fire add event\n      const event = new CustomEvent('dropdown-element-add', {\n        bubbles: true,\n        composed: true,\n        detail: {\n          id,\n          'first-selection': this._selectedChoices.size === 1,\n        },\n      });\n      this.dispatchEvent(event);\n    } else {\n      this._selectedChoices.delete(id);\n      // Fire delete event\n      const event = new CustomEvent('dropdown-element-delete', {\n        bubbles: true,\n        composed: true,\n        detail: {\n          id,\n          'none-selected': this._selectedChoices.size === 0,\n        },\n      });\n      this.dispatchEvent(event);\n    }\n  }\n\n  render() {\n    return html`\n      <p id=\"prompt\">${this.prompt}</p>\n      <button\n        id=\"drpdwn-collapse-btn\"\n        @click=${() => {\n          this.open = !this.open;\n        }}\n      ></button>\n      <div id=\"choices-list\">\n        ${this.choices.map(\n          c => html`\n            <div id=\"choice-ctr\">\n              <input\n                id=${c.id}\n                type=\"checkbox\"\n                @click=${this.handleCheckboxClick}\n                ?checked=${c.checked}\n                ?disabled=${c.disabled}\n              />\n              <label>${c.description}</label>\n            </div>\n          `\n        )}\n      </div>\n    `;\n  }\n}\n"]}