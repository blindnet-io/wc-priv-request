{"version":3,"file":"PrivacyRequestApi.js","sourceRoot":"","sources":["../../../src/utils/PrivacyRequestApi.ts"],"names":[],"mappings":"AAGA;;;;GAIG;AACH,SAAS,aAAa,CAAC,OAAuB;IAC5C,gEAAgE;IAChE,IAAI,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;QAC9B,OAAO,+CAA+C,CAAC;KACxD;IAED,wDAAwD;IACxD,IAAI,OAAO,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;QAChC,MAAM,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACtC,OAAO,qBAAqB,MAAM,WAAW,CAAC;KAC/C;IAED,yCAAyC;IACzC,OAAO,UAAU,CAAC;AACpB,CAAC;AAED;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,kBAAkB,CACtC,OAAuB,EACvB,OAAgB,IAAI;IAEpB,MAAM,GAAG,GAAG,IAAI;QACd,CAAC,CAAC,0FAA0F;QAC5F,CAAC,CAAC,uCAAuC,CAAC;IAC5C,MAAM,OAAO,GAAQ,IAAI;QACvB,CAAC,CAAC;YACE,cAAc,EAAE,kBAAkB;YAClC,MAAM,EAAE,aAAa,CAAC,OAAO,CAAC;SAC/B;QACH,CAAC,CAAC;YACE,cAAc,EAAE,kBAAkB;SACnC,CAAC;IAEN,OAAO,KAAK,CAAC,GAAG,EAAE;QAChB,MAAM,EAAE,MAAM;QACd,OAAO;QACP,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;KAC9B,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;QACjB,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;SACtC;QACD,OAAO,QAAQ,CAAC,IAAI,EAA8B,CAAC;IACrD,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { PrivacyRequest } from '../models/privacy-request.js';\nimport { PrivacyResponse } from '../models/privacy-response.js';\n\n/**\n * Determine the correct mock header for a PrivacyRequest\n * @param request PrivacyRequest to get mock header for\n * @returns String to be used in the \"prefer\" header\n */\nfunction getMockHeader(request: PrivacyRequest): string {\n  // If more than 1 demand, send the default multi demand response\n  if (request.demands.length > 1) {\n    return 'code=200, example=TRANSPARENCY Multi-Response';\n  }\n\n  // Select the mock response corresponding to this action\n  if (request.demands.length === 1) {\n    const { action } = request.demands[0];\n    return `code=200, example=${action} Response`;\n  }\n\n  // If no demands get bad request response\n  return 'code=400';\n}\n\n/**\n * Send a PrivacyRequest to the privacy-request API\n * @param {PrivacyRequest} request Request body to send\n * @param {boolean} mock Flag indicating if the mock endpoint should be used\n * @returns\n */\nexport async function sendPrivacyRequest(\n  request: PrivacyRequest,\n  mock: boolean = true\n): Promise<PrivacyResponse> {\n  const url = mock\n    ? 'https://stoplight.io/mocks/blindnet/product-management:open-api/74767654/privacy-request'\n    : 'http://localhost:3000/privacy-request';\n  const headers: any = mock\n    ? {\n        'Content-Type': 'application/json',\n        Prefer: getMockHeader(request),\n      }\n    : {\n        'Content-Type': 'application/json',\n      };\n\n  return fetch(url, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(request),\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return response.json() as Promise<PrivacyResponse>;\n  });\n}\n"]}